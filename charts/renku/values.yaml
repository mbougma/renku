## Default values for renku.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## Global variables
## Shared values/secrets
global:
  gitlab:
    ## Client secret, set this to a random string.
    ## To change this value after deploying, first generate a new secret using the Keycloak admin console
    ## then paste the generated secret here
    clientSecret: # use `uuidgen -r`
    ## Name of the postgres database to be used by Gitlab
    postgresDatabase: gitlabhq_production
    ## Postgres user for the gitlab database
    postgresUser: gitlab
    ## Postgres password for the gitlab database
    postgresPassword:
      value:
      overwriteOnHelmUpgrade: false
    ## Sudo token for sudo API requests
    sudoToken:
      value:
      overwriteOnHelmUpgrade: false
    ## URL prefix for gitlab
    # urlPrefix: /

  keycloak:
    ## Name of the postgres database to be used by Keycloak
    postgresDatabase: keycloak
    ## Postgres user for the Keycloak database
    postgresUser: keycloak
    ## Postgres password for the Keycloak database
    postgresPassword:
      value:
      overwriteOnHelmUpgrade: false
    ## Admin password for Keycloak
    password:
      value:
      overwriteOnHelmUpgrade: false
  jupyterhub:
    ## Name of the postgres database to be used by jupyterhub
    postgresDatabase: jupyterhub
    ## Postgres user for the jupyterhub database
    postgresUser: jupyterhub
    ## Postgres password for the jupyterhub database
    postgresPassword:
      value:
      overwriteOnHelmUpgrade: false
  gateway:
    clientSecret: # use `uuidgen -r`
    ## The client ID for authentication against gitlab
    gitlabClientId: renku-ui
    ## The client secret for authentication against gitlab
    gitlabClientSecret:
  renku:
    ## Domain name for the deployed instance of renku
    domain: example.local
    ## Renku version to be used (currently for project creation in
    ## the UI) If not set explicitly the version will be picked up
    ## from the respective renku (sub)chart.
    version: 0.4.0
  ## Note that the graph will not turned on by default until renku 0.4.0
  graph:
    dbEventLog:
      ## Name of the postgres user to be used to access the Event Log db
      postgresUser: eventlog
      ## Postgres password to be used to access the Event Log db
      postgresPassword:
        value:
        overwriteOnHelmUpgrade: false
      existingSecret: '{{ template "renku.fullname" . }}-db-postgres'
    tokenRepository:
      ## Name of the postgres user to be used to access the db storing access tokens
      postgresUser: tokenstorage
      ## Postgres password to be used to access the db storing access tokens
      postgresPassword:
        value:
        overwriteOnHelmUpgrade: false
      existingSecret: '{{ template "renku.fullname" . }}-token-postgres'
    jena:
      ## specify which dataset should be used in Jena
      dataset:
  ## Set to true if using https
  useHTTPS: false
  anonymousSessions:
    ## Set to true to enable anonymous sessions through
    ## a secondary Jupyterhub instance
    enabled: false
    ## Set the postgres password for you secondary JH deployment
    ## or force the (re)generation of it on helm upgrade.
    postgresPassword:
      value:
      overwriteOnHelmUpgrade: false

## Ingress configuration
## See: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  ## Enables the creation of an ingress
  enabled: false

  ## Annotations for the created ingress
  annotations:
    ## The ingress class
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: 'true'
    nginx.ingress.kubernetes.io/proxy-body-size: '0' # Adjust to a reasonable value for production to avoid DOS attacks.
    nginx.ingress.kubernetes.io/proxy-request-buffering: 'off' # Needed if GitLab is behind this ingress

  ## Hosts for the ingress
  ## Should include at least the value from `global.renku.domain`
  hosts:
    - example.local

  ## TLS setting for the ingress
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - example.local

## Keycloak configuration
keycloak:
  ## Create a demo user in keycloak? Note that the password for the demo
  ## user must be queried from kubernetes (see the rendered NOTES.txt
  ## template which is shown after a successul deployment).
  createDemoUser: false

  ## Spawn a keycloak instance
  enabled: true

  ## This section points to an image used to create
  ## a Renku realm and initialize it with the necessary
  ## clients during deployment. It should not be necessary
  ## to modify these values. This step is omitted if no
  ## keycloak admin username/password is supplied.
  initRealm:
    image:
      repository: renku/init-realm
      tag: 'latest'

  keycloak:

    ## Keycloak admin user configuration
    username: admin
    ## Do not set an admin password through this chart value. Instead, set it
    ## through global.keycloak.password.value.
    # password:
    existingSecret: keycloak-password-secret
    existingSecretKey: keycloak-password

    livenessProbe:
      initialDelaySeconds: 180
    readinessProbe:
      initialDelaySeconds: 120

    extraInitContainers: |
      - name: theme-provider
        image: renku/keycloak-theme:v1.2
        imagePullPolicy: IfNotPresent
        command:
          - sh
        args:
          - -c
          - |
            echo "Copying theme..."
            cp -Rfv /renku_theme/* /theme
        volumeMounts:
          - name: theme
            mountPath: /theme

    extraVolumes: |
      - name: theme
        emptyDir: {}

    extraVolumeMounts: |
      - name: theme
        mountPath: /opt/jboss/keycloak/themes/renku-theme

    persistence:

      # Disable deployment of the PostgreSQL chart
      deployPostgres: false

      # The database vendor. Can be either "postgres", "mysql", "mariadb", or "h2"
      dbVendor: postgres

      ## The following values only apply if "deployPostgres" is set to "false"
      dbName: keycloak
      # !!!
      ## This value is dependent on the Release name! (but helm charts don't allow templating values here.)
      # !!!
      dbHost: renku-postgresql
      dbPort: 5432 # 5432 is PostgreSQL's default port. For MySQL it would be 3306
      dbUser: keycloak

      # !!!
      ## This value is dependent on the Release name! (but helm charts don't allow templating values here.)
      # !!!
      existingSecret: renku-keycloak-postgres
      existingSecretKey: keycloak-postgres-password

    ingress:
      enabled: false


# Postgresql configuration
# The bitnami postgres chart offers a variety of configuration options, most of
# which are not explicitly mentioned here. We predominantly list the values where we
# deviate from the defaults or where we expect the some deployment specific values
# to be set. For all options and their defaults see:
# https://github.com/bitnami/charts/tree/master/bitnami/postgresql#parameters
# For production deployments check out
# https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values-production.yaml
postgresql:

  ## We use the defaults here. Note that these basic configs could also be set as
  ## global values such that sub-charts can access them too.
  postgresqlDatabase: postgres
  postgresqlUsername: postgres

  ## The admin password should be set explicitly, otherwise a random string will be
  ## created. Alternatively an existing secret can be provided. Note that postgres
  ## DOES NOT tolerate a change of the admin password when upgrading.
  # postgresqlPassword:

  ## Use an existing secret instead of creating a new one. It must have a
  ## postgresql-password key containing the password for the posgres user.
  # existingSecret:

  image:
    repository: bitnami/postgresql
    tag: 9.6

  persistence:
    ## We use the defaults here, but they will probably be modified for most deployments.
    enabled: true
    size: 8Gi
    ## Provide an existing PersistentVolumeClaim to be reused.
    # existingClaim:

  # Consider replication. These are the defaults for the basic settings.
  replication:
    enabled: false
    user: repl_user
    password: repl_password # generate a random password `openssl rand -hex 32`
    slaveReplicas: 1


## Gitlab configuration
gitlab:
  ## Spawn a gitlab instance
  enabled: true
  ## Password for the `root` user
  password: gitlabadmin

  ## Gitlab image
  image:
  #   pullPolicy: IfNotPresent
    repository: gitlab/gitlab-ce
    tag: 11.9.11-ce.0

  ## automatically log in to gitlab
  oauth:
    autoSignIn: true

  ## Pod affinity for Gitlab deployment
  # affinity: {}
  ## Node selector for Gitlab deployment
  # nodeSelector: {}
  ## Pod tolerations for Gitlab deployment
  # tolerations: []

  ## Resource requests/limits for Gitlab
  # resources: {}

  ## Registration token for gitlab runners (initial value, can be regenerated from gitlab admin ui)
  ## Generated using: `openssl rand -hex 32`
  sharedRunnersRegistrationToken:

  ## Set to true to make the user 'demo' a GitLab admin
  demoUserIsAdmin: false

  ## External port for git ssh protocol
  ## This setting affects the copy-paste repo git+ssh URL
  # sshPort: 22

  ## LFS objects settings
  ## Used to store git-lfs objects externally
  ## Note: bucket must exist before use, GitLab won't do it
  ## Follows: https://docs.gitlab.com/ce/workflow/lfs/lfs_administration.html#storing-lfs-objects-in-remote-object-storage
  # lfsObjects:
      ## Set to true to enable remote LFS objects
      # enabled: false
      ## Bucket name
      # bucketName: lfs-objects
      # directUpload: false
      # backgroundUpload: true
      # proxyDownload: false
      # connection: |-
      #   {
      #     'provider' => 'AWS',
      #     'region' => 'eu-central-1',
      #     'aws_access_key_id' => '1ABCD2EFGHI34JKLM567N',
      #     'aws_secret_access_key' => 'abcdefhijklmnopQRSTUVwxyz0123456789ABCDE',
      #     # The below options configure an S3 compatible host instead of AWS
      #     'host' => 'localhost',
      #     'endpoint' => 'http://127.0.0.1:9000',
      #     'path_style' => true
      #   }

  ## Persistent Volume settings
  persistence:
    ## Set to false to disable the use of Persistent Volume
    ## The databases will be lost when the pod is terminated!
    # enabled: true

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## database data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass:

    # accessMode: ReadWriteOnce
    size: 30Gi

    ## Mount points for the PV
    ## Setup according to the volumes declared in the Gitlab image
    # gitlab_data:
    #   subPath: data
    #   mountPath: /var/opt/gitlab
    # gitlab_config:
    #   subPath: config
    #   mountPath: /etc/gitlab
    # gitlab_logs:
    #   subPath: logs
    #   mountPath: /var/log/gitlab

  ## Service configuration for Gitlab
  ## Modify service.type according to your setup
  # service:
  #   port: 80
  #   type: ClusterIP

  ## Container image registry settings
  registry:
    ## Set to true to enable Gitlab registry
    enabled: false
    ## The URL to access the registry
    # externalUrl:
    ## Set `exposedAs` to "NodePort" when deploying on minikube
    ## Set `exposedAs` to "Ingress" to expose the registry on an alternate domain.
    # exposedAs: NodePort
    ## Storage driver configuration for the registry
    ## See: https://docs.gitlab.com/ee/administration/container_registry.html#container-registry-storage-driver
    # storage: |-
    #   {
    #     's3' => {
    #       'accesskey' => 's3-access-key',
    #       'secretkey' => 's3-secret-key-for-access-key',
    #       'bucket' => 'your-s3-bucket',
    #       'region' => 'your-s3-region'
    #     }
    #   }
    ## Registry ingress, when `exposedAs` is set to "Ingress"
    ## Uses conventional settings for ingress
    ## Find below an example of values
    # ingress:
    #   annotations:
    #     kubernetes.io/ingress.class: nginx
    #     kubernetes.io/tls-acme: "true"
    #     nginx.ingress.kubernetes.io/proxy-body-size: '0'
    #   hosts:
    #   - registry.example.com
    #   tls:
    #   - hosts:
    #     - registry.example.com
    #     secretName: registry-tls

  ## Add some extra configuration to gitlab.rb
  # extraConfig: |
  #     ## Fix number of unicorn workers
  #     unicorn['worker_processes'] = 7

  #     ## Fix something else
  #     ...

## Configuration for the UI service
ui:
  #  welcomePage:
  #    text: "## Some markdown text here!"
  ## UI image
  # image:
  #   pullPolicy: Always
  #   repository: renku/renku-ui
  #   tag: latest

  ingress:
    enabled: false

  ## Pod affinity for UI deployment
  # affinity: {}
  ## Node selector for UI deployment
  # nodeSelector: {}
  ## Pod tolerations for UI deployment
  # tolerations: []

  ## Replica count
  # replicaCount: 1

  ## Service configuration for UI
  ## Modify service.type according to your setup
  # service:
  #   port: 80
  #   type: ClusterIP

  ## Set the GitLab URL
  # gitlabUrl: "http://gitlab.renku.build"

  ## Configure application ID from "{{ gitlabUrl }}/oauth/application"
  ## by setting redirect URL to "{{ baseUrl }}/login/redirect/gitlab"
  ## and set the application ID as the "gitlabClientId" chart value.
  # gitlabClientId: "renku-ui"

  ## Set the JupyterHub URL
  # jupyterhubUrl: "http://jupyterhub.renku.build"

  ## Configuration for where to get the base project templates: a url and ref (usually a tag)
  templatesRepository:
    # url: https://github.com/SwissDataScienceCenter/renku-project-template
    # ref: 0.1.6

  ## Configuration for Sentry
  # sentry:
  #   enabled: false
  #   url: ''
  #   namespace: ''

  ## Configuration for statuspage.io integration
  statuspage:
    # Provide the id for the statuspage, which is the subdomain of statuspage.io
    # used in the API queries. This can be found from the /api path.
    # E.g., under https://renkulab.statuspage.io/api you see that summary
    # is available under https://5bcn9bqff4qt.statuspage.io/api/v2/summary.json, so
    # id: 5bcn9bqff4qt

# ## Configuration for the notebooks service
notebooks:
  ## serverOptions allow for modifications to the notebook pod resource requests and the UI rendering
  # serverOptions:
  #   defaultUrl:
  #     order: 1
  #     displayName: Default Environment
  #     type: enum
  #     default: /lab
  #     options: [/lab]
  #   cpu_request:
  #     order: 2
  #     displayName: Number of CPUs
  #     type: enum
  #     default: 0.5
  #     options: [0.5, 1.0]
  #   mem_request:
  #     order: 3
  #     displayName: Amount of Memory
  #     type: enum
  #     default: 1G
  #     options: [1G, 2G]
  #   gpu_request:
  #     order: 4
  #     displayName: Number of GPUs
  #     type: enum # use "type: int" instead to get a slider
  #     default: 0
  #     options: [0, 0] # use "range: [x, y]" when type is int
  #   lfs_auto_fetch:
  #     order: 5
  #     displayName: Automatically fetch LFS data
  #     type: boolean
  #     default: false
  ## image registry host
  # imageRegistry:
  ## JupyterHub setup
  jupyterhub:
    ## Configure rbac
    # rbac:
    #   enabled: true
    ## Set the notebooks service API token
    hub:
      services:
        # notebooks:
        #   api_token: notebookstoken

        ## define the client ID and secret for the gateway
        gateway:
          oauth_no_confirm: true
        #  oauth_client_id: gateway
        #  apiToken: # use `openssl rand -hex 32`
        #  oauth_redirect_uri: http://<gateway>/api/auth/jupyterhub/token
        ## Configure gitlab and postgres:
        ## Values need to be set to get jupyterhub to work
       # extraEnv:
       #  - name: GITLAB_URL
       #    value: <gitlab url>
       #  - name: DEBUG
       #    value: "1"
       #  - name: JUPYTERHUB_SPAWNER_CLASS
       #    value: spawners.RenkuKubeSpawner
       #  - name: PGPASSWORD
       #    valueFrom:
       #        secretKeyRef:
       #          name: renku-jupyterhub-postgres
       #          key: jupyterhub-postgres-password

    ## Simple default setup for gitlab oauth
    # auth:
    #   type: gitlab
    #   gitlab:
    #     clientId: jupyterhub
    #     clientSecret: dummy-secret
    #     callbackUrl:  # Null value forces the default callback url
    ## Configure idle pod culling
    # cull:
    #   enabled: true
    #   timeout: 86400
    #   every: 60
    singleuser:
      image:
        name: renku/renkulab-py
        tag: 3.7-renku0.10.4-0.6.3
    #   # use JupyterLab by default in notebook servers
    #   defaultUrl: /lab

    # The following section disables some of the default JupyterHub
    # optimizations which can interfere with simple setups. See
    # https://zero-to-jupyterhub.readthedocs.io/en/latest/administrator/optimization.html
    # for details.
    scheduling:
      userScheduler:
        enabled: false
      userPlaceholder:
        enabled: false
    prePuller:
      continuous:
        enabled: false

tests:
  image:
    repository: renku/tests
    tag: 'latest'
  ## User accounts for running `helm test`
  ## Replace passwords with random strings in a production setup
  #users_json:
  #  - username: bwayne
  #    firstName: Bruce
  #    lastName: Wayne
  #    email: bwayne@example.com
  #    password: IamBatman
  #  - username: ckent
  #    firstName: Clark
  #    lastName: Kent
  #    email: ckent@example.com
  #    password: IamSuperman

## Configuration for the Gateway service
gateway:
  ingress:
    enabled: false
  ## Uncomment this if you are using a GitLab version
  ## prior to 12.7.0.
  # oldGitLabLogout: true

## Configuration for renku-graph
graph:
  ## Enable/disable the graph - enabled by default since renku 0.4.0
  enabled: true
  ## Configuration for Apache Jena
  # jena:
  #   users:
  #     ## Set the admin password
  #     admin:
  #       password: 1234
  #     ## Password for graph service queries
  #     renku:
  #       password: 5678

  gitlab:
    url:

  # tokenRepository:
  #   ## A secret for signing access tokens stored in the database
  #   ## Generated using: `openssl rand -hex 8|base64`
  #   tokenEncryption:
  #     secret: 1234

  # webhookService:
  #   hookToken:
  #     ## A secret for signing request header tokens to be sent by GitLab with the Push Events
  #     ## Generated using: `openssl rand -hex 8|base64`
  #     secret: 1234

## Configuration for renku-core service
# repository:
  ## Default cache directory
  # cacheDirectory: /svc/cache

  ## Default clone depth
  # projectCloneDepth: 1
